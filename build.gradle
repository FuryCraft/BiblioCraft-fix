buildscript {
    repositories {
		 maven {
            name = "maven"
            url = "https://repo1.maven.org/maven2"
        }
		 maven {
            name = "jcenter"
            url = "https://jcenter.bintray.com/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
		  maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "1.0"
group= "fr.fixexploit" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "fixexploit"

configurations {
    shadow
    compile.extendsFrom shadow
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}
allprojects{
	repositories {
	 maven {
            name = "maven"
            url = "https://repo1.maven.org/maven2"
        }
		 maven {
            name = "jcenter"
            url = "https://jcenter.bintray.com/"
        }
		  maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	
	shadow('org.spongepowered:mixin:0.6.11-SNAPSHOT'){
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

}

ext.mixinSrg = new File(project.buildDir,    "resources/main/mixins.srg")
ext.mixinRefMap = new File(project.buildDir, "resources/main/mixins.fixexploit.refmap.json")


jar {
    manifest {
        attributes(
                'FMLCorePlugin': 'fr.fixexploit.asm.LoadingPlugin',
                'FMLCorePluginContainsFMLMod' : 'true',
                "TweakClass": "fr.fixexploit.libs.org.spongepowered.asm.launch.MixinTweaker",
                'ForceLoadAsMod': 'true',
        )
    }

    configurations.shadow.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    from mixinRefMap
}


processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [ "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=mixins.srg" ]
    options.deprecation = false
    options.warnings = false
    options.encoding = 'utf8'
}

compileJava {
    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.getCanonicalPath()}",
            "-AoutRefMapFile=${project.mixinRefMap.getCanonicalPath()}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').getCanonicalPath()}"
    ]
    options.deprecation = false
    options.warnings = false
    options.encoding = 'UTF-8'
}

task copySrgs(type: Copy, dependsOn: "genSrgs") {
    // using some FG hacks here
    from plugins.getPlugin("forge").delayedFile("{SRG_DIR}")
    include '**/*.srg'
    into 'build/srgs'
}

setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

shadowJar {
    configurations = [project.configurations.shadow] // ***
    classifier = null

	relocate 'org.spongepowered.', 'fr.fixexploit.libs.org.spongepowered.'
	
    exclude 'META-INF/services/**'
    exclude 'baubles/**'
    exclude 'codechicken/**'
    exclude 'GradleStart**'
    exclude 'BLogo.png'
    exclude 'changelog.txt'
    exclude 'neimod.info'
    exclude 'pack.mcmeta'
    exclude 'net/minecraftforge/gradle/**'
    
    from mixinRefMap
}

reobf {
    addExtraSrgFile mixinSrg
    reobf(shadowJar.archivePath) {
        spec -> spec.classpath = configurations.compile
    }
}
reobf.dependsOn shadowJar
